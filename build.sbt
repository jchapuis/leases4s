import sbtversionpolicy.Compatibility.BinaryAndSourceCompatible

val scala213 = "2.13.11"
val scala3 = "3.3.1"

val commonSettings = Seq(
  Compile / compile / wartremoverErrors ++= Warts.allBut(
    Wart.Any,
    Wart.Nothing,
    Wart.ImplicitParameter,
    Wart.Throw,
    Wart.DefaultArguments,
    Wart.Recursion,
    Wart.ImplicitConversion,
    Wart.Overloading
  ),
  scalaVersion := scala213,
  crossScalaVersions := Seq(scala213, scala3),
  Compile / scalacOptions ++= {
    CrossVersion.partialVersion(scalaVersion.value) match {
      case Some((2, _)) => Seq("-Xsource:3")
      case _            => Nil
    }
  },
  Compile / scalacOptions ++= Seq("-Xfatal-warnings", "-Xlint:unused"),
  addCompilerPlugin("com.olegpy" %% "better-monadic-for" % "0.3.1"),
  Test / parallelExecution := false
)

inThisBuild(
  List(
    organization := "io.github.jchapuis",
    licenses := List("Apache License, Version 2.0" -> url("https://opensource.org/license/apache-2-0/")),
    homepage := Some(url("https://github.com/jchapuis/leases4s")),
    developers := List(
      Developer(
        "jchapuis",
        "Jonas Chapuis",
        "me@jonaschapuis.com",
        url("https://jonaschapuis.com")
      )
    ),
    sonatypeCredentialHost := "s01.oss.sonatype.org",
    sonatypeProjectHosting := Some(
      xerial.sbt.Sonatype.GitHubHosting("jchapuis", "leases4s", "me@jonaschapuis.com")
    ),
    versionPolicyIntention := Compatibility.None,
    versionScheme := Some("early-semver"),
    versionPolicyIgnoredInternalDependencyVersions := Some(
      "^\\d+\\.\\d+\\.\\d+\\+\\d+".r
    ) // Support for versions generated by sbt-dynver
  )
)

Global / onChangedBuildSource := ReloadOnSourceChanges

lazy val core = (project in file("core"))
  .settings(commonSettings *)
  .settings(name := "leases4s")
  .settings(
    libraryDependencies ++= Seq(
      "com.goyeau" %% "kubernetes-client" % "0.11.0",
      "org.typelevel" %% "log4cats-core" % "2.6.0",
      "org.scalameta" %% "munit" % "1.0.0-M8" % Test,
      "org.typelevel" %% "munit-cats-effect" % "2.0.0-M3" % Test,
      "org.typelevel" %% "cats-effect-testkit" % "3.5.1" % Test,
      "org.typelevel" %% "log4cats-slf4j" % "2.6.0" % Test,
      "ch.qos.logback" % "logback-classic" % "1.4.14" % Test
    )
  )

lazy val patterns = (project in file("patterns"))
  .settings(commonSettings *)
  .settings(name := "leases4s-patterns")
  .settings(
    libraryDependencies ++= Seq(
      "org.scalameta" %% "munit" % "1.0.0-M8" % Test,
      "org.typelevel" %% "munit-cats-effect" % "2.0.0-M3" % Test,
      "org.typelevel" %% "cats-effect-testkit" % "3.5.1" % Test
    )
  )
  .dependsOn(core % "compile->compile;test->test")

lazy val example = (project in file("example"))
  .settings(commonSettings *)
  .settings(name := "leases4s-example")
  .dependsOn(core, patterns)
  .settings(run / fork := true, publish / skip := true)

lazy val root = project
  .aggregate(core, patterns, example)
  .settings(crossScalaVersions := Nil)
  .settings(publish / skip := true)
